@model CourseDetailViewModel
@{
    ViewBag.PageName = "My Courses";
    Layout = "_InstructorLayout";
    ViewData["Title"] = "My Courses";
}
<style>
    .courseDetails{
        padding: 20px 40px;
        background-color: white;
    }

    .courseDetailscontainer{
        width: 86%;
    }
    .courseDetails .col-4 img{
        width: 300px;
    }

    .courseDetails .col-7{
        margin-left: 10px;
    }

    .created-by {
        display: flex;
        align-items: center;
        font-family: Arial, sans-serif;
        color: #555;
    }

    .avatars {
        display: flex;
        position: relative;
    }

    .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: 2px solid white;
        position: absolute;
    }

        .avatar:first-child {
            left: 0;
            z-index: 1;
        }

        .avatar:last-child {
            left: 25px;
            z-index: 2;
        }

    .text, .rating-score {

        font-size: 13px;
    }
    .text span{
        padding-top: 60px;
    }

    .names {
        padding-top: 20px;
        font-weight: bold;
    }

    .rating {
        display: inline-block;
        font-size: 0;
        direction: rtl; /* sağdan sola dizayn */
    }

    .star {
        width: 20px;
        height: 20px;
        background: url('star-empty.png') no-repeat;
        display: inline-block;
    }

        .star.full {
            background: url('star-full.png') no-repeat;
        }

        .star.half {
            background: url('star-half.png') no-repeat;
        }

    .timedescription, .description {
        color: #8B93A2;
        font-size: 11px;
    }

    .data-span{
        color: #4E5566;
        font-size: 11px;
    }

    .courseDetails h2{
        font-size: 15px;
        font-weight: 650;
        padding: 5px 0px 0px 0px;
    }

    .creatorandraiting{

        padding: 20px 0px 40px 0px;
    }

    #createdby{
        margin-bottom: 20px;
    }

    #createdby, .rating-count{
        color: #6E7485;
        font-size: 12px;
    }

    .course-details-footer{
        border-top: 1px solid #E9EAF0;
        padding-top: 20px;
    }

    .ratingcolumn{
        text-align: right;
    }

    .ratingcol{
        padding-top: 0px;
    }

    .revenuecol{
        border-left: 1px solid #E9EAF0;
        padding-left: 20px;
        
    }

    #withdrewMoney{
        padding: 10px 20px;
        color: white;
        background-color: #FF6636;
        font-size: 14px;
        border: none;
    }

    .cardsandgraph{
        display: flex;
    }
</style>

<div class="container mt-5 courseDetailscontainer">
    <div class="container courseDetails">
        <div class="row">
            <div class="col col-4">
                <img src=@Model.CourseImgURL />
            </div>
            <div class="col col-7">
                <div class="row">
                    <div class="col">
                        <span class="timedescription">Uploaded:</span><span class="data-span"> @Model.UploadedDate.ToString("MMM dd, yyyy")</span>
                        <span class="timedescription">Last Updated:</span><span class="data-span"> @Model.LastUpdateDate.ToString("MMM dd, yyyy")</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <h2>@Model.Title</h2>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <span class="timedescription">@Model.Description</span>
                    </div>
                </div>
                <div class="row creatorandraiting">
                    <div class="col col-2">
                        <div class="created-by">
                            <div class="avatars">
                                @foreach (var item in Model.Creators)
                                {
                                    <img src=@item.InstructorImagUrl alt="Kevin Gilbert" class="avatar">
                                }
                            </div>
                            
                        </div>
                       
                        
                    </div>
                    <div class="col">
                        <div class="text">
                            <span id="createdby">Created by:</span> <br />
                            @foreach (var item in Model.Creators)
                            {
                                <span class="names">@item.InstructorName @item.InstructorSurname • </span>
                            }
                        </div>
                    </div>
                    <div class="col text-end  align-middle 
">
                        <div class="rating">
                            <svg width="100" height="20" viewBox="0 0 100 20" xmlns="http://www.w3.org/2000/svg">
                                <defs>
                                    <linearGradient id="halfGrad">
                                        <stop offset="@((Model.CourseRating % 1) * 100)%" stop-color="#FD8E1F" />
                                        <stop offset="@((Model.CourseRating % 1) * 100)%" stop-color="lightgray" />
                                    </linearGradient>
                                </defs>

                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= (int)Model.CourseRating)
                                    {
                                        <polygon points="@($"{20 * (i - 1) + 10},1 {20 * (i - 1) + 12},7 {20 * (i - 1) + 18},7 {20 * (i - 1) + 13},10 {20 * (i - 1) + 15},16 {20 * (i - 1) + 10},12 {20 * (i - 1) + 5},16 {20 * (i - 1) + 7},10 {20 * (i - 1) + 2},7 {20 * (i - 1) + 8},7")" fill="#FD8E1F" />
                                    }
                                    else if (i == (int)Model.CourseRating + 1 && Model.CourseRating % 1 != 0)
                                    {
                                        <polygon points="@($"{20 * (i - 1) + 10},1 {20 * (i - 1) + 12},7 {20 * (i - 1) + 18},7 {20 * (i - 1) + 13},10 {20 * (i - 1) + 15},16 {20 * (i - 1) + 10},12 {20 * (i - 1) + 5},16 {20 * (i - 1) + 7},10 {20 * (i - 1) + 2},7 {20 * (i - 1) + 8},7")" fill="url(#halfGrad)" />
                                    }
                                    else
                                    {
                                        <polygon points="@($"{20 * (i - 1) + 10},1 {20 * (i - 1) + 12},7 {20 * (i - 1) + 18},7 {20 * (i - 1) + 13},10 {20 * (i - 1) + 15},16 {20 * (i - 1) + 10},12 {20 * (i - 1) + 5},16 {20 * (i - 1) + 7},10 {20 * (i - 1) + 2},7 {20 * (i - 1) + 8},7")" fill="lightgray" />
                                    }
                                }
                            </svg>
                        </div>
                        <span class="rating-score">@Model.CourseRating</span>
                        <span class="rating-count">(@Model.RatingCount Rating)</span>
                    </div>
                </div>
                <div class="row course-details-footer">
                    <div class="col col-2">
                        <span class="value">$@Model.CoursePrice</span> <br />
                        <span class="description">Course price</span>
                    </div>
                    <div class="col revenuecol">
                        <span class="value">$@Model.CourseRevenue</span><br />
                        <span class="description">USD dollar revenue</span>
                    </div>
                    <div class="col text-end">
                        <button id="withdrewMoney">Withdrew Money</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
</div>

<div class="container mt-3 courseDetailscontainer cardsandgraph">
    @Html.Partial("~/Views/Instructor/_instructorCourseDetailsPartialView.cshtml", Model.CourseDetailedInfo)
    @Html.Partial("~/Views/Instructor/_linearGraphPartialView.cshtml", Model)
</div>


<script>
    function renderStars(rating) {
        const fullStars = Math.floor(rating);
        const halfStar = rating % 1 >= 0.5 ? 1 : 0;

        const starElements = document.querySelectorAll('.star');
        for (let i = 0; i < starElements.length; i++) {
            if (i < fullStars) {
                starElements[i].classList.add('full');
            } else if (i < fullStars + halfStar) {
                starElements[i].classList.add('half');
            }
        }
    }

</script>
